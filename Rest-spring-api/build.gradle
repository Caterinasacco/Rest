configurations {
    includeInJar {
        canBeResolved(true)
        canBeConsumed(false)
        transitive false
    }

}

sourceSets {
    main {
        compileClasspath += configurations.includeInJar
        runtimeClasspath += configurations.includeInJar
    }

    test {
        compileClasspath += configurations.includeInJar
        runtimeClasspath += configurations.includeInJar
    }
}

dependencies {
    //SLF4J
    implementation group: 'org.slf4j', name: 'slf4j-api', version: project.slf4jVersion
    //lombok
    implementation group: 'org.projectlombok', name: 'lombok', version: project.lombokVersion
    annotationProcessor 'org.projectlombok:lombok:' + project.lombokVersion
    //Atteo
    implementation 'org.atteo.classindex:classindex:' + project.atteoClassIndexVersion
    annotationProcessor('org.atteo.classindex:classindex:' + project.atteoClassIndexVersion)
    //REST
    implementation group: "javax.ws.rs", name: "javax.ws.rs-api", version: project.jaxWsRsApiVersion

    implementation 'org.springframework.boot:spring-boot-starter-web:' + project.springBootVersion
    implementation 'org.springframework.boot:spring-boot-starter-aop:' + project.springBootVersion

    implementation 'io.springfox:springfox-swagger2:3.0.0'
    implementation 'io.springfox:springfox-swagger-ui:3.0.0'

    implementation group: 'it.water.distribution', name: 'Water-distribution-spring', version: project.waterVersion

    includeInJar(project(":Rest-service"))

    testImplementation(project(":Rest-api"))
    testImplementation(project(":Rest-service"))
    testImplementation(project(":Rest-security"))
    testImplementation(project(":Rest-persistence"))

    testImplementation group: 'it.water.core', name: 'Core-api', version: project.waterVersion
    testImplementation group: 'it.water.core', name: 'Core-interceptors', version: project.waterVersion
    testImplementation group: 'it.water.core', name: 'Core-model', version: project.waterVersion
    testImplementation group: 'it.water.core', name: 'Core-security', version: project.waterVersion
    testImplementation group: 'it.water.core', name: 'Core-validation-javax', version: project.waterVersion

    testImplementation 'org.springframework.boot:spring-boot-starter-test:' + project.springBootVersion
    testImplementation 'org.junit.jupiter:junit-jupiter-api:' + project.junitJupiterVersion
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:' + project.junitJupiterVersion
    testImplementation 'org.atteo.classindex:classindex:' + project.atteoClassIndexVersion
    testAnnotationProcessor('org.atteo.classindex:classindex:' + project.atteoClassIndexVersion)
}

test {
    useJUnitPlatform()
}

jar {
    from project.configurations.includeInJar.collect { it.isDirectory() ? it : zipTree(it) }
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    doFirst {
        def annotationsPath = "$buildDir/classes/java/main/META-INF/annotations"
        def serviceDir = file(annotationsPath)
        // copy all deps annotations
        for (file in project.configurations.includeInJar) {
            zipTree(file).matching { include 'META-INF/annotations/*' }.each { f ->
                new File(serviceDir, f.name) << f.getText("UTF-8")
            }
        }
    }

}

publishing {
    publications {
        water(MavenPublication) {
            from components.java
        }
    }
}
 